/**
 * This file is part of FXGameEngine 
 * A Game Engine written in JavaFX
 * Copyright (C) 2012 Anton Epple <info@eppleton.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. Look for COPYING file in the top folder.
 * If not, see http://opensource.org/licenses/GPL-2.0.
 * 
 * For alternative licensing or use in closed source projects contact Anton Epple 
 * <info@eppleton.de>
 */
package de.eppleton.fx2d.samplegames.bck2brwsr;

import de.eppleton.fx2d.event.KeyCode;
import de.eppleton.fx2d.event.KeyEvent;
import de.eppleton.fx2d.samples.pong.Pong;
import java.util.ServiceLoader;
import net.java.html.canvas.GraphicsContext;
import org.apidesign.bck2brwsr.htmlpage.api.On;
import org.apidesign.bck2brwsr.htmlpage.api.OnEvent;
import org.apidesign.bck2brwsr.htmlpage.api.Page;
import org.apidesign.html.sound.spi.AudioEnvironment;

/**
 * This is the controller class for associated index.html page. The
 * <code>Index</code> is autogenerated by parsing the index.html page. It fields
 * represent individual elements annotated by "id" in the page.
 */
@Page(xhtml = "index.html", className = "Index")
public class App {
    static {
        Index model = new Index();
        GraphicsContext gc = model.canvas.getContext();
        gc.setFont("36pt Verdana");
       
        
        Logger.log("Played sound");
        ServiceLoader<AudioEnvironment> loaded = ServiceLoader.load(AudioEnvironment.class);
         for (AudioEnvironment ae :loaded){
            Logger.logObject(ae);
        }
        pong = new Pong(gc, 800, 600, 800, 600);
    }
    private static Pong pong;

    @On(event = OnEvent.KEY_DOWN, id = "canvas")
    static void keyPress(final Index m, int keyCode) {
        KeyCode keyCode1 = KeyCode.getKeyCode(keyCode);
        pong.dispatchEvent(new KeyEvent(pong, KeyEvent.KEY_PRESSED, keyCode1));
    }

    @On(event = OnEvent.KEY_UP, id = "canvas")
    static void keyRealeased(final Index m, int keyCode) {
        KeyCode keyCode1 = KeyCode.getKeyCode(keyCode);
        pong.dispatchEvent(new KeyEvent(pong, KeyEvent.KEY_RELEASED, keyCode1));
    }
}
